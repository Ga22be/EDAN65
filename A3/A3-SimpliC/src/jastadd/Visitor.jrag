aspect Visitor {
	/**
	 * Visitor interface for SimpliC language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Function node, Object data);
		public Object visit(Parameter node, Object data);
		public Object visit(Return node, Object data);

		public Object visit(IfStatement node, Object data);
		public Object visit(Else node, Object data);
		public Object visit(WhileStatement node, Object data);
		public Object visit(FunctionCall node, Object data);

		public Object visit(LesserThan node, Object data);
		public Object visit(GreaterThan node, Object data);
		public Object visit(Equal node, Object data);
		public Object visit(NotEqual node, Object data);

		public Object visit(Declaration node, Object data);
		public Object visit(Assignment node, Object data);
		public Object visit(DeclAssignment node, Object data);

		public Object visit(Add node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mod node, Object data);

		public Object visit(Numeral node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);
		public Object visit(FunctionUse node, Object data);

	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Function.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Parameter.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Return.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object IfStatement.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Else.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object WhileStatement.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FunctionCall.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object LesserThan.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GreaterThan.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Equal.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object NotEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Declaration.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Assignment.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object DeclAssignment.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FunctionUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
