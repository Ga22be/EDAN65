%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID;

// Self added terminals
%terminals INT, LPAR, RPAR, LBRACE, RBRACE, SEMI;

%typeof program = "Program";
%typeof function = "Function";
%typeof functionList = "List";
%typeof id = "IdDecl";
%typeof stmtList = "List";
%typeof decl = "Declaration";

%goal program;

program = functionList.a {: return new Program(a); :};

functionList =
    function.func {: return new List().add(func); :}
    | functionList.funcList function.func {: return funcList.add(func); :} ;

function =
    INT id.funcID LPAR RPAR LBRACE stmtList.listOfStmt RBRACE {: return new Function(funcID, listOfStmt); :}
    | INT id.funcID LPAR RPAR LBRACE RBRACE {: return new Function(funcID, new List()); :}
    ;

stmtList =
    stmt.stmt {: return new List().add(stmt); :}
    | stmtList.stmtList stmt.stmt {: return stmtList.add(stmt); :} ;

stmt = decl;

decl = INT id.id SEMI {: return new Declaration(id); :};

id = ID.id {: return new IdDecl(id); :} ;
