%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID;

// Self added terminals
%terminals NUMERAL, INT, LPAR, RPAR, LBRACE, RBRACE, SEMI, ASSIGN, ADD, SUB, MUL, DIV, MOD, COMMA, IF, LT, GT;

%typeof program = "Program";
%typeof function = "Function";
%typeof functionList = "List";
%typeof parameter = "Parameter";
%typeof paramList = "List";
%typeof idDecl = "IdDecl";
%typeof stmtList = "List";
%typeof stmt = "Statement";
%typeof expr = "Expression";
%typeof decl = "Declaration";
%typeof assign = "Assignment";
%typeof numeral = "Numeral";
%typeof idUse = "IdUse";
%typeof add = "Add";
%typeof sub = "Sub";
%typeof mul = "Mul";
%typeof div = "Div";
%typeof mod = "Mod";
%typeof term = "Term";
%typeof factor = "Factor";
%typeof ifStmt = "IfStatement";
%typeof lt = "LesserThan";
%typeof gt = "GreaterThan";
%typeof comparison = "Comparison";

%goal program;

program = functionList.a {: return new Program(a); :};

// Functions
functionList =
    function.func {: return new List().add(func); :}
    | functionList.funcList function.func {: return funcList.add(func); :} ;

function =
    INT idDecl.funcID LPAR paramList.listOfParams RPAR LBRACE stmtList.listOfStmts RBRACE {: return new Function(funcID, listOfParams, listOfStmts); :}
    |   INT idDecl.funcID LPAR paramList.listOfParams RPAR LBRACE RBRACE {: return new Function(funcID, listOfParams, new List()); :}
    ;

// Parameters
paramList =
    // Empty
    {: return new List(); :}
    | parameter.param {: return new List().add(param); :}
    | paramList.paramList COMMA parameter.param {: return paramList.add(param); :} ;

parameter = INT idDecl.paramID {: return new Parameter(paramID); :};

// Statements
stmtList =
    // Empty
    //{: return new List(); :}
    //|
    stmt.stmt {: return new List().add(stmt); :}
    | stmtList.stmtList stmt.stmt {: return stmtList.add(stmt); :} ;

stmt = ifStmt | decl | assign;

ifStmt = IF LPAR comparison.comp RPAR LBRACE stmtList.listOfStmts RBRACE {: return new IfStatement(comp, listOfStmts); :}
    | IF LPAR comparison.comp RPAR LBRACE RBRACE {: return new IfStatement(comp, new List()); :}
;

decl = INT idDecl.id SEMI {: return new Declaration(id); :} ;

assign = idDecl.id ASSIGN expr.expr SEMI {: return new Assignment(id, expr); :} ;

// Comparisons
comparison = lt | gt;

lt = expr.left LT expr.right {: return new LesserThan(left, right); :} ;
gt = expr.left GT expr.right {: return new GreaterThan(left, right); :} ;

// Expressions
expr = add | sub | term;

add = expr.expr ADD term.term {: return new Add(expr, term); :} ;
sub = expr.expr SUB term.term {: return new Sub(expr, term); :} ;

// Terms
term = mul | div | mod | factor;

mul = term.term MUL factor.factor {: return new Mul(term, factor); :} ;
div = term.term DIV factor.factor {: return new Div(term, factor); :} ;
mod = term.term MOD factor.factor {: return new Mod(term, factor); :} ;

// Factors
factor = idUse | numeral | LPAR expr RPAR ;

numeral = NUMERAL.num {: return new Numeral(num); :} ;

idUse = ID.id {: return new IdUse(id); :} ;

idDecl = ID.id {: return new IdDecl(id); :} ;
