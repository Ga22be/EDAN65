%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID;

// Self added terminals
%terminals NUMERAL, INT, LPAR, RPAR, LBRACE, RBRACE, SEMI, ASSIGN;

%typeof program = "Program";
%typeof function = "Function";
%typeof functionList = "List";
%typeof idDecl = "IdDecl";
%typeof stmtList = "List";
%typeof stmt = "Statement";
%typeof expr = "Expression";
%typeof decl = "Declaration";
%typeof assign = "Assignment";
%typeof numeral = "Numeral";
%typeof idUse = "IdUse";

%goal program;

program = functionList.a {: return new Program(a); :};

functionList =
    function.func {: return new List().add(func); :}
    | functionList.funcList function.func {: return funcList.add(func); :} ;

function =
    INT idDecl.funcID LPAR RPAR LBRACE stmtList.listOfStmt RBRACE {: return new Function(funcID, listOfStmt); :}
    | INT idDecl.funcID LPAR RPAR LBRACE RBRACE {: return new Function(funcID, new List()); :}
    ;

stmtList =
    stmt.stmt {: return new List().add(stmt); :}
    | stmtList.stmtList stmt.stmt {: return stmtList.add(stmt); :} ;

// Statements
stmt = decl | assign ;

decl = INT idDecl.id SEMI {: return new Declaration(id); :} ;

assign = idDecl.id ASSIGN expr.expr SEMI {: return new Assignment(id, expr); :} ;

// Expressions
expr = numeral | idUse;

numeral = NUMERAL.num {: return new Numeral(num); :} ;

idUse = ID.id {: return new IdUse(id); :} ;

idDecl = ID.id {: return new IdDecl(id); :} ;
